import re
from datetime import datetime


class Data:
    def __init__(self, macro_list: str, macro_prefix: str, ray_enum: str, ray_prefix: str, my_enum: str,
                 modifier_postfix):
        self.macro_list = macro_list
        self.macro_prefix = macro_prefix
        self.ray_enum = ray_enum
        self.ray_prefix = ray_prefix
        self.my_enum = my_enum
        self.modifier_postfix = modifier_postfix


# @formatter:off
keyboard = Data(
    macro_list=       'KEYBOARD_KEY_LIST',
    macro_prefix=     'K',
    ray_enum=         'KeyboardKey',
    ray_prefix=       'KEY',
    my_enum=          'Keyboard',
    modifier_postfix= 'Mod',
)
mouse = Data(
    macro_list=       'MOUSE_BUTTON_LIST',
    macro_prefix=     'M',
    ray_enum=         'MouseButton',
    ray_prefix=       'MOUSE',
    my_enum=          'Mouse',
    modifier_postfix= 'Mod',
)
gamepad = Data(
    macro_list=       'GAME_PAD_KEY_LIST',
    macro_prefix=     'G',
    ray_enum=         'GamepadButton',
    ray_prefix=       'GAMEPAD',
    my_enum=          'Gamepad',
    modifier_postfix= 'Mod',
)
# formatter:on


def get_enum_names(file: str, target_enum_name: str, entry_prefix: str) -> list[str]:
    enum_pattern = r"typedef\s+enum\s*{([^}]*)}\s*(\w+);"
    enum_item_pattern = r"\s*(\w+)\s*[,;]?"

    enum_names = []

    enums = re.findall(enum_pattern, file)

    for enum_values, enum_types in enums:
        if target_enum_name == enum_types:
            enum_items = re.findall(enum_item_pattern, enum_values)
            for entry in enum_items:
                if entry.startswith(entry_prefix):
                    enum_names.append(entry)

    return enum_names


def get_enum_list(entries: list[str], list_name: str, makro: str) -> str:
    to_return = f"#define {list_name} \\\n"
    for entry in entries:
        to_return += f"\t\t{makro}({entry}) \\\n"

    to_return = to_return[:-2]
    return to_return


def get_enum_class(list_name: str, entry_prefix: str, my_enum:str, ray_enum: str, modifier_postfix:str) -> str:
    return f"""enum class {my_enum}{modifier_postfix} {{
\t#define {entry_prefix}(name) name = static_cast<int>({ray_enum}::name),
\t\t{list_name}
\t}};
"""

def get_concepts()->str:
    return f"""template <typename T>
    concept IsRayKey = 
        std::is_same_v<T, {keyboard.ray_enum}> or 
        std::is_same_v<T, {mouse.ray_enum}> or 
        std::is_same_v<T, {gamepad.ray_enum}>;
        
    template <typename T>
    concept IsButton = 
        std::is_same_v<T, {keyboard.my_enum}> or 
        std::is_same_v<T, {mouse.my_enum}> or 
        std::is_same_v<T, {gamepad.my_enum}>;

    template <typename T>
    concept IsModifier = 
        std::is_same_v<T, {keyboard.my_enum}{keyboard.modifier_postfix}> or 
        std::is_same_v<T, {mouse.my_enum}{mouse.modifier_postfix}> or 
        std::is_same_v<T, {gamepad.my_enum}{gamepad.modifier_postfix}>;
        
    template <typename T>
    concept IsInput =
        IsButton<T> or
        IsModifier<T>;
"""


if __name__ == '__main__':
    with open('raylib.h', 'r') as f:
        file = f.read()

    keyboard_keys = get_enum_names(file, keyboard.ray_enum, keyboard.ray_prefix)
    mouse_keys = get_enum_names(file, mouse.ray_enum, mouse.ray_prefix)
    gamepad_keys = get_enum_names(file, gamepad.ray_enum, gamepad.ray_prefix)

    output: str = f"""//
// Purpur Tentakel
// {datetime.today().strftime('%d.%m.%Y')}
// AUTOGENERATED: Do not modify this file
//

#pragma once

#include <concepts>

namespace uil {{
\t
// {'-' * 10} Keyboard {'-' * 10}
\t{get_enum_list(keyboard_keys, keyboard.macro_list, keyboard.macro_prefix)}
\t
\t{get_enum_class(keyboard.macro_list, keyboard.macro_prefix, keyboard.my_enum, keyboard.ray_enum, '')}
\t{get_enum_class(keyboard.macro_list, keyboard.macro_prefix, keyboard.my_enum,keyboard.ray_enum, keyboard.modifier_postfix)}
\t
// {'-' * 10} Mouse {'-' * 10}
\t{get_enum_list(mouse_keys, mouse.macro_list, mouse.macro_prefix)}
\t
\t{get_enum_class(mouse.macro_list, mouse.macro_prefix, mouse.my_enum,mouse.ray_enum, '')}
\t{get_enum_class(mouse.macro_list, mouse.macro_prefix, mouse.my_enum,mouse.ray_enum, mouse.modifier_postfix)}
\t
// {'-' * 10} Gamepad {'-' * 10}
\t{get_enum_list(gamepad_keys, gamepad.macro_list, gamepad.macro_prefix)}
\t
\t{get_enum_class(gamepad.macro_list, gamepad.macro_prefix, gamepad.my_enum,gamepad.ray_enum, '')}
\t{get_enum_class(gamepad.macro_list, gamepad.macro_prefix, gamepad.my_enum,gamepad.ray_enum, gamepad.modifier_postfix)}


// {'-' * 10} Concepts {'-' * 10}
\t{get_concepts()}
}} // namespace uil

// fully generated
"""

    with open('input_enum.hpp', 'w') as f:
        f.write(output)
